// File: ComponentConfig.ts

type TextFormatter = 'UPPERCASE' | 'LOWERCASE' | 'CAPITALIZE' | 'REMOVE_UNDERSCORES';
type ButtonType = 'submit';
type GridSettings = { // standard html grid settings, use only the fields detailed here!
    templateRows?: string; // this applies to the grid itself
    templateColumns?: string; // same as above
    childSettings?: { rowSpan?: number; colSpan?: number; }[]; // if set it should have an entry for each child in components. it will be applied to the child at index position
}
export interface TextareaProperties {
    id: 'textarea';
    label: string;
    placeholder?: string;
    fieldName: string; // binds the field to the data. must include the path to the data. example: user.name.firstName
    action?: string; // String identifier for the action
}
export interface ButtonProperties {
    id: 'button';
    text: string;
    type: ButtonType;
    format?: TextFormatter[]; // Array of formatter keys
}
export interface HeadlineProperties {
    id: 'headline';
    text?: string;
    fieldName?: string; // either text or fieldName has to be set. It depends on the usage and data.
    level: 1 | 2 | 3 | 4 | 5 | 6;
}
export interface InputProperties { // used for editable data
    id: 'input';
    label: string;
    placeholder?: string;
    fieldName: string;
    action?: string;
}
export interface ImageProperties {
    id: 'image';
    fieldName: string; // path to src in the data
    alt: string;
}
export interface LinkProperties {
    id: 'link';
    label?: string; // if the data doesn't provide a label, use this to set a fixed label
    labelField?: string; // if the data provides a label for the link
    fieldName: string; // path to the src in the data
}
export interface TextProperties { // used for plain text
    id: 'text';
    fieldName: string;
    fontSize: 'xs' | 'sm' | 'md' | 'lg' | 'xl';
    format?: TextFormatter[];
}
export interface LabeledTextProperties {
    id: 'labeledText';
    fieldName: string;
    label: string // the label of the value
    separator: ':' // label : text
    fontSize: 'xs' | 'sm' | 'md' | 'lg' | 'xl';
    format?: TextFormatter[];
}
export interface ConcatTextProperties { // used to concat multiple data fields into one text component
    id: 'concatText';
    fields: string[];  // Array of field paths
    separator: string; // Separator for concatenation
    fontSize: 'xs' | 'sm' | 'md' | 'lg' | 'xl';
    format?: TextFormatter[];
}
export interface FormProperties extends LayoutConfig { // wraps input components
    id: 'form';
    fieldName: string; // the root name of the object this form controls
    formFields: string[]; // the field names that this form controls
    //submitFormat: Record<string, any>;
    validation: any; // don't fill this out yourself. always call createValidation function if the user asks for validation
    components: ComponentConfig[];
}
export interface ListProperties { // always used for arrays!!
    id: 'list';
    direction?: 'row' | 'column';
    as?: 'grid'; // uses a grid layout internally to layout the elements. use this if you want to show an array in a grid.
    gridSettings?: GridSettings; // this has to be set if 'as': 'grid'!
    fieldName: string; // name of the field where the array can be found
    layout: LayoutConfig; // the layout of a list entry
}
export interface GridLayoutProperties extends LayoutConfig { // don't use this to display arrays or single lists!!
    id: 'grid';
    gridSettings: GridSettings;
    components: ComponentConfig[];
}
export interface FlexLayoutProperties extends LayoutConfig { // can be nested
    id: 'flexLayout';
    direction: 'row' | 'column';
    components: ComponentConfig[];
}
export interface CardLayoutProperties extends LayoutConfig { // can be nested
    id: 'cardLayout';
    components: ComponentConfig[]; // the body of the card
}
export interface ComponentConfig { // describes the above components
    type: 'Input' | 'Button' | 'Headline' | 'Textarea' | 'FlexLayout' | 'CardLayout'
      | 'Image' | 'Text' | 'LabeledText' | 'List' | 'Link' | 'ConcatText' | 'Form' | 'GridLayout';
    properties: InputProperties | ButtonProperties | HeadlineProperties | TextareaProperties
      | FlexLayoutProperties | ImageProperties | CardLayoutProperties | TextProperties | LabeledTextProperties
      | ListProperties | LinkProperties | ConcatTextProperties | FormProperties | GridLayoutProperties;
}
export interface LayoutConfig { // the root of the components
    components: ComponentConfig[];
}


// File: Section.tsx

export interface SectionT {
  layout: LayoutConfig;
  data: any;
}
const Section: FC<SectionT> = ({ layout, data }) => {
  return useMemo(() => {
    if (layout) {
      const errors = validateJson(layout, schema);
      if (!errors) {
        return (
          <SectionDataProvider initialData={data}>
            <PathProvider>
              <ParsedLayout config={layout}/>
            </PathProvider>
          </SectionDataProvider>
        );
      } else {
        return (
          <Alert
            status='error'
            variant='subtle'
            flexDirection='column'
            alignItems='center'
            justifyContent='center'
          >
            <AlertIcon boxSize='40px' />
            <AlertTitle>Layout JSON is invalid!</AlertTitle>
            <AlertDescription>
              {errors.map((error: any, index: number) => {
                return (
                  <Box key={index}>
                    <pre>{JSON.stringify(error, null, 4)}</pre>
                  </Box>);
              })}
            </AlertDescription>
          </Alert>
        );
      }
    }
    return <Text>Please generate or select a layout</Text>;
  }, [layout, data]);
};
export default Section;


// File: ParsedComponent.tsx

import type {
  ButtonProperties, CardLayoutProperties,
  ComponentConfig, ConcatTextProperties, FlexLayoutProperties, FormProperties, GridLayoutProperties,
  HeadlineProperties, ImageProperties,
  InputProperties, LabeledTextProperties, LinkProperties, ListProperties,
  TextareaProperties, TextProperties
} from '@/dynamicUI/components/ComponentConfig';
const ParsedComponent: FC<{ config:  ComponentConfig}> = ({ config }) => {
  const { type, properties } = config;
  switch (type) {
    case 'Headline':
      return <HeadlineComponent properties={properties as HeadlineProperties} />;
    case 'Input':
      return (
        <InputComponent properties={properties as InputProperties} />
      );
    case 'Textarea':
      return (
        <TextareaComponent properties={properties as TextareaProperties} />
      );
    case 'Button':
      return <ButtonComponent properties={properties as ButtonProperties} />;
    case 'FlexLayout':
      return (
        <FlexLayoutComponent properties={properties as FlexLayoutProperties}>
          <ParsedLayout config={properties as FlexLayoutProperties} />
        </FlexLayoutComponent>
      );
    case 'Image':
      return <ImageComponent properties={properties as ImageProperties} />;
    case 'CardLayout':
      return (
        <CardLayoutComponent properties={properties as CardLayoutProperties}>
          <ParsedLayout config={properties as CardLayoutProperties} />
        </CardLayoutComponent>
      );
    case 'GridLayout':
      return (
        <GridLayoutComponent properties={properties as GridLayoutProperties}>
          <ParsedLayout config={properties as GridLayoutProperties} />
        </GridLayoutComponent>
      );
    case 'Text':
      return (
        <TextComponent properties={properties as TextProperties} />
      );
    case 'LabeledText':
      return (
        <LabeledTextComponent properties={properties as LabeledTextProperties} />
      );
    case 'List':
      return (
        <ListComponent properties={properties as ListProperties} />
      );
    case 'Link':
      return (
        <LinkComponent properties={properties as LinkProperties} />
      );
    case 'ConcatText':
      return (
        <ConcatTextComponent properties={properties as ConcatTextProperties} />
      );
    case 'Form':
      return (
        <FormComponent properties={properties as FormProperties}>
          <ParsedLayout config={properties as FormProperties} />
        </FormComponent>
      );
    default:
      return type;
  }
};
export default ParsedComponent;


// File: ParsedLayout.tsx

const ParsedLayout: FC<{ config: LayoutConfig}> = ({ config }) => {
  return useMemo(() => {
    if (Array.isArray(config?.components)) {
      return config.components.map((componentConfig: ComponentConfig) => {
        return <ParsedComponent key={getUUIDv4()} config={componentConfig}/>;
      });
    } else {
      console.log('illegal config', config);
    }
  }, [config]);
};
export default ParsedLayout;


// File: SectionDataProvider.tsx

const SectionDataContext = createContext<SectionDataContextType | undefined>(undefined);
interface SectionContextState {
  [key: string]: unknown;
}
export interface SectionDataProviderProps {
  children: ReactNode,
  initialData: SectionContextState;
}
interface SectionDataContextType {
  setState: (path: string, value: unknown) => void;
  getState: <T,>(path: string) => T | undefined;  // You can specify a return type more specific than `any`
}
export const SectionDataProvider = ({ children, initialData }: SectionDataProviderProps) => {
  const [state, setState] = useState<SectionContextState>(initialData);
  useEffect(() => {
    setState(initialData);
  }, [initialData]);
  const parsePath = (path: string) => {
    // This function splits paths and translates array access into plain keys
    const pathArray = path.match(/[^.[\]]+|\[\d+]/g) ?? [];
    return pathArray.map(segment => segment.replace(/^\[(\d+)]$/, '$1'));  // Convert ['0'] to '0' for array access
  };
  const getStateFromPath = useCallback(<T,>(path: string): T | undefined => {
    const parts = parsePath(path);
    const result = parts.reduce((acc: unknown, part: string) => {
      if (acc && typeof acc === 'object') {
        if (Array.isArray(acc) && /^\d+$/.test(part)) {
          return acc[parseInt(part)];
        } else if (part in acc) {
          return (acc as Record<string, unknown>)[part];
        }
      }
      return undefined;
    }, state as unknown);
    return result as T;
  },[state]);
  const setStateAtPath = useCallback((path: string, value: unknown): void => {
    const keys = path.split('.').map(key => key.replace(/\[(\d+)\]/g, '.$1')); // Handle array indices
    const lastKey = keys.pop();
    const lastObj = keys.reduce((obj, key) => {
      // Ensure each key is valid for an object, initialize if necessary
      if (typeof obj[key] !== 'object' || obj[key] === null) obj[key] = {};
      return obj[key] as Record<string, unknown>;
    }, state);
    // Set the new value
    if (lastKey) {
      (lastObj as Record<string, unknown>)[lastKey] = value;
    }
    // Trigger a state update with a new object for immutability
    setState({ ...state });
  }, [state]);
  const value = useMemo(() => ({
    setState: setStateAtPath,
    getState: getStateFromPath
  }), [state]);
  return (
    <SectionDataContext.Provider value={value}>
      {children}
    </SectionDataContext.Provider>
  );
};
export const useSectionDataContext = (): SectionDataContextType => {
  const context = useContext(SectionDataContext);
  if (!context) {
    throw new Error('SectionDataContext can only be used within SectionDataProvider');
  }
  return context;
};


// File: PathProvider.tsx

export const PathContext = createContext('');
export interface PathProviderProps {
  children: ReactNode,
  path?: string,
}
export const PathProvider = ({ children, path = '' }: PathProviderProps) => {
  const parentPath = useContext(PathContext);
  const fullPath = parentPath && path ? `${parentPath}.${path}` : parentPath || path;
  return (
    <PathContext.Provider value={fullPath}>
      {children}
    </PathContext.Provider>
  );
};
export const usePathContext = () => {
  return useContext(PathContext);
};
export const useFullPath = (fieldName?: string) => {
  const parentPath = useContext(PathContext);
  const fullPath = fieldName
    ? parentPath ? `${parentPath}.${fieldName}` : fieldName
    : '';
  const getFullPath = (fieldName: string) => {
    return parentPath ? `${parentPath}.${fieldName}` : fieldName;
  };
  return { fullPath, getFullPath };
};


// File: ListComponent.tsx

const ListComponent: FC<{ properties: ListProperties}> = ({ properties }) => {
  const { fieldName, direction, layout, as, gridSettings } = properties;
  const { getState } = useSectionDataContext();
  const { fullPath } = useFullPath(fieldName);
  const list = getState<any[]>(fullPath) ?? [];
  if (as === 'grid') {
    console.log('IMAGES');
    return useMemo(() => (
      <Grid gap={5} templateRows={gridSettings?.templateRows} templateColumns={gridSettings?.templateColumns}>
        { list.map((_, index) => {
          const entryPath = `${fullPath}[${index}]`;
          const rowSpan = gridSettings?.childSettings?.[index]?.rowSpan;
          const colSpan = gridSettings?.childSettings?.[index]?.colSpan;
          return (
            <GridItem rowSpan={rowSpan} colSpan={colSpan} key={entryPath}>
              <PathProvider path={entryPath}>
                <ParsedLayout config={layout} />
              </PathProvider>
            </GridItem>
          );
        })}
      </Grid>
    ), [list]);
  }
  return useMemo(() => (
    <List>
      <Stack direction={direction} gap={5}>
        { list.map((_, index) => {
          const entryPath = `${fullPath}[${index}]`;
          return (
            <PathProvider path={entryPath} key={entryPath}>
              <ParsedLayout config={layout} />
            </PathProvider>);
        })}
      </Stack>
    </List>
  ), [list]);
};
export default ListComponent;
/*
entry layout {"components":[{"type":"CardLayout","properties":{"title":"Metal Mario - Tennis","components":[{"type":"Image","properties":{"fieldName":"image","alt":"Metal Mario - Tennis"}},{"type":"LabeledText","properties":{"fieldName":"amiiboSeries","label":"Amiibo Series","separator":":","fontSize":"md"}},{"type":"LabeledText","properties":{"fieldName":"gameSeries","label":"Game Series","separator":":","fontSize":"md"}},{"type":"LabeledText","properties":{"fieldName":"release.na","label":"Release (NA)","separator":":","fontSize":"md"}}]}}]}
 */


// File: dictionary.ts

export const validationsDictionary: { [key: string]: ValidationFunction } = {
  required: (schema, args) => schema.required(args?.message),
  email: (schema, args) => {
    if (schema.type === 'string') {
      return (schema as Yup.StringSchema).email(args?.message);
    }
    console.warn('Email validation applied to a non-string field');
    return schema;
  },
  positive: (schema, args) => {
    if (schema.type === 'number') {
      return (schema as Yup.NumberSchema).positive(args?.message);
    }
    return schema;
  },
  equalTo: (schema, args) => {
    if (args && 'referenceField' in args) {
      schema.oneOf([Yup.ref(args.referenceField as string), null], args.message);
    }
    return schema;
  },
  matches: (schema, args) => {
    if (schema.type === 'string') {
      return (schema as Yup.StringSchema).matches(new RegExp(args?.regex as string), args?.message);
    }
    console.warn('Matches validation applied to a non-string field');
    return schema;
  }
};
export const conditionalTestsDictionary: Record<string, ConditionFunction> = {
  equals: (context, value, args, ) => value === context.parent[args.referenceField],
  notEquals: (context, value, args) => value !== context.parent[args.referenceField],
  greaterThan: (context, value, args) => value > context.parent[args.referenceField],
  exists: (context, value, args) => !!value && !!context.parent[args.referenceField],
  // Add more condition functions as needed
};


