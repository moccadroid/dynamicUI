{
  "TextareaProperties": "export interface TextareaProperties {\n    id: 'textarea';\n    label: string;\n    placeholder?: string;\n    fieldName: string; // binds the field to the data. must include the path to the data. example: user.name.firstName\n    action?: string; // String identifier for the action\n}",
  "ButtonProperties": "export interface ButtonProperties {\n    id: 'button';\n    text: string;\n    type: ButtonType;\n    format?: TextFormatter[]; // Array of formatter keys\n}",
  "HeadlineProperties": "export interface HeadlineProperties {\n    id: 'headline';\n    text?: string;\n    fieldName?: string; // either text or fieldName has to be set. It depends on the usage and data.\n    level: 1 | 2 | 3 | 4 | 5 | 6;\n}",
  "InputProperties": "export interface InputProperties { // used for editable data\n    id: 'input';\n    label: string;\n    placeholder?: string;\n    fieldName: string;\n    action?: string;\n}",
  "ImageProperties": "export interface ImageProperties {\n    id: 'image';\n    fieldName: string; // path to src in the data\n    alt: string;\n    size?: string; // size in px e.g. 100px\n}",
  "LinkProperties": "export interface LinkProperties {\n    id: 'link';\n    label?: string; // if the data doesn't provide a label, use this to set a fixed label\n    labelField?: string; // if the data provides a label for the link\n    fieldName: string; // path to the src in the data\n}",
  "TextProperties": "export interface TextProperties { // used for plain text\n    id: 'text';\n    fieldName: string;\n    fontSize: 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n    align?: string;// text-align property;\n    format?: TextFormatter[];\n}",
  "LabeledTextProperties": "export interface LabeledTextProperties {\n    id: 'labeledText';\n    fieldName: string;\n    label: string // the label of the value\n    separator: ':' // label : text\n    fontSize: 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n    format?: TextFormatter[];\n}",
  "CodeProperties": "export interface CodeProperties { // use this to display code related content\n    id: 'code';\n    fieldName: string;\n}",
  "ConcatTextProperties": "export interface ConcatTextProperties { // used to concat multiple data fields into one text component\n    id: 'concatText';\n    fields: string[];  // Array of field paths\n    separator: string; // Separator for concatenation\n    fontSize: 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n    format?: TextFormatter[];\n}",
  "FormProperties": "export interface FormProperties extends LayoutConfig { // wraps input components\n    id: 'form';\n    fieldName: string; // the root name of the object this form controls\n    formFields: string[]; // the field names that this form controls\n    //submitFormat: Record<string, any>;\n    validation: any; // don't fill this out yourself. always call createValidation function if the user asks for validation\n    components: ComponentConfig[];\n}",
  "ListProperties": "export interface ListProperties { // always used for arrays!!\n    id: 'list';\n    direction?: 'row' | 'column';\n    as?: 'grid'; // uses a grid layout internally to layout the elements. use this if you want to show an array in a grid.\n    gridSettings?: GridSettings; // this has to be set if 'as': 'grid'!\n    fieldName: string; // name of the field where the array can be found\n    layout: LayoutConfig; // the layout of a list entry\n}",
  "GridLayoutProperties": "export interface GridLayoutProperties extends LayoutConfig { // don't use this to display arrays or single lists!!\n    id: 'grid';\n    gridSettings: GridSettings;\n    components: ComponentConfig[];\n}",
  "FlexLayoutProperties": "export interface FlexLayoutProperties extends LayoutConfig { // can be nested\n    id: 'flexLayout';\n    direction: 'row' | 'column';\n    justify?: string; // justify-content property\n    align?: string; // align-items property\n    components: ComponentConfig[];\n}",
  "CardLayoutProperties": "export interface CardLayoutProperties extends LayoutConfig { // can be nested\n    id: 'cardLayout';\n    components: ComponentConfig[]; // the body of the card\n}",
  "ComponentConfig": "export interface ComponentConfig { // describes the above components\n    type: 'Input' | 'Button' | 'Headline' | 'Textarea' | 'FlexLayout' | 'CardLayout' | 'Code'\n      | 'Image' | 'Text' | 'LabeledText' | 'List' | 'Link' | 'ConcatText' | 'Form' | 'GridLayout';\n    properties: InputProperties | ButtonProperties | HeadlineProperties | TextareaProperties | CodeProperties\n      | FlexLayoutProperties | ImageProperties | CardLayoutProperties | TextProperties | LabeledTextProperties\n      | ListProperties | LinkProperties | ConcatTextProperties | FormProperties | GridLayoutProperties;\n}",
  "LayoutConfig": "export interface LayoutConfig { // the root of the components\n    components: ComponentConfig[];\n}"
}